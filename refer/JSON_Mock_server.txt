json server 실행
json-server --watch db.json --port 4001





기능		method	path
전체목록조회	GET	/posts
추가		POST	/posts
삭제		DELETE	/posts/:id
수정		PUT	/posts/:id


CRUD

POST
fetch('자원 식별자'), {
	method:'POST',
	headers:{'content-type':application/json'} //콘텐츠 타입을 JSON포맷으로 전달
	body:JSON.stringify({key:value}) //자원식별자에 있는 resource에 문서 하나를 더 추가 할 것.
	//괄호안에 객체 형식으로 추가할 데이터 명시
} .then (function(response) {
return response.json()}) 응답값 반환
JSON-server에서 키값은 id값으로 자동으로 생성됨 auto increment


GET
read collection
fetch ('자원식별자', {
	method:'GET',
	//HTTP method인 get명시 (default라 명시 안해도 되긴 함)
}.then((res) => {})
})

부분 읽기 get
fetch('자원식별자/id', {
	method:'GET'
} .then ((res) => {return response.json()}) 
})
부분수정 patch (전송하지 않은 데이터는 삭제되는 것에 주의)
fetch ('자원식별자/id', {
	method:'PATCH',
	header:{'content-type' : 'application/json'} //컨텐츠 타칩을 json 포맷으로 전달
	body:JSON.stringify({key:value}) 자원식별자/id에 있는 resource에 키와 매칭된 값을 변경하며 나머지는 그대로
}.then ((res) => {return response.json() })


PUT
fetch('자원식별자/id', {
	method:'PUT'
	header:{'content-type' : 'application/json'} //컨텐츠 타칩을 json 포맷으로 전달
	body:JSON.stringify({key:value}) 자원식별자/id에 있는 resource에 키와 매칭된 값을 변경하며 나머지는 그대로
}.then ((res) => {return response.json() })
})

DELETE
fetch('자원식별자/id', {
	method:'DELETE', //element 데이터 삭제
	collection 전체를 삭제는 자제
}, then ((res) => {return response.json()})

RESTful API를 위해
리소스간에 관계를 맺을 때 어떻게 URI로 표현할지. topic 내에 종속되어있는 comments를 URI로 표현하는 방법은,

fetch ( '부모 collection명/element의 id값/종속된 collection명 (/종속된 element의 id값) ' , { ... }

innerHTML vs createElement - DocumentFragment
innerHTML  성능 및 보안 이슈가 있기에 createElement를 활용하는 것이 더 낫다.




